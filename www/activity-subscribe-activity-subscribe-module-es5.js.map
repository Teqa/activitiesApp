{"version":3,"sources":["./src/app/pages/activity-subscribe/activity-subscribe.page.html","./src/app/pages/activity-subscribe/activity-subscribe-routing.module.ts","./src/app/pages/activity-subscribe/activity-subscribe.module.ts","./src/app/pages/activity-subscribe/activity-subscribe.page.scss","./src/app/pages/activity-subscribe/activity-subscribe.page.ts"],"names":[],"mappings":"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","file":"activity-subscribe-activity-subscribe-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Contactpersoon</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <ion-card *ngIf=\\\"information\\\">\\n        <ion-card-header>\\n            <ion-card-title>\\n                {{ information.event_desc }}\\n            </ion-card-title>\\n        <ion-card-subtitle>\\n        {{ information.date }}\\n        </ion-card-subtitle>\\n        </ion-card-header>\\n     </ion-card>\\n    \\n    \\n    <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"onSubmit(validations_form.value)\\\">\\n    \\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Voornaam</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"initials\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.initials\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('initials').hasError(validation.type) && (validations_form.get('initials').dirty || validations_form.get('initials').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Achternaam</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"lastname\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.lastname\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('lastname').hasError(validation.type) && (validations_form.get('lastname').dirty || validations_form.get('lastname').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n        \\n    <ion-item>\\n      <ion-label color=\\\"primary\\\">Akkoord met AV</ion-label>\\n      <ion-checkbox color=\\\"primary\\\" formControlName=\\\"terms\\\"></ion-checkbox>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.terms\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('terms').hasError(validation.type) && (validations_form.get('terms').dirty || validations_form.get('terms').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-button color=\\\"primary\\\" class=\\\"submit-btn\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Reserveer!</ion-button>\\n  </form>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ActivitySubscribePage } from './activity-subscribe.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ActivitySubscribePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ActivitySubscribePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Validators, FormBuilder, FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ActivitySubscribePageRoutingModule } from './activity-subscribe-routing.module';\n\nimport { ActivitySubscribePage } from './activity-subscribe.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    ActivitySubscribePageRoutingModule\n  ],\n  declarations: [ActivitySubscribePage]\n})\nexport class ActivitySubscribePageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FjdGl2aXR5LXN1YnNjcmliZS9hY3Rpdml0eS1zdWJzY3JpYmUucGFnZS5zY3NzIn0= */\"","import { ActivityService } from './../../services/activity.service';\nimport { ConfigService } from './../../services/config.service';\nimport { Component, OnInit } from '@angular/core';\nimport _ from \"underscore\";\nimport { Validators, FormBuilder, FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-activity-subscribe',\n  templateUrl: './activity-subscribe.page.html',\n  styleUrls: ['./activity-subscribe.page.scss'],\n})\nexport class ActivitySubscribePage implements OnInit {\n  information = null;\n  contact = null;\n  participants = null;\n  \n  validations_form: FormGroup;\n  \n  constructor(private activityService: ActivityService,public formBuilder: FormBuilder,\n    private configService: ConfigService, private router: Router) { }\n\n  ngOnInit() {\n    this.information = this.activityService.chosen_event;\n    this.contact = this._initContact(this.activityService.chosen_contact);\n    var participants = this.information['participants']['object'];\n    this.participants =  _.values(participants);\n    this.validations_form = this.formBuilder.group({\n      initials: new FormControl('', Validators.required),\n      lastname: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      terms: new FormControl(false, Validators.pattern('true'))\n    });\n    this.validations_form.controls['initials'].setValue(this.contact.initials);\n    this.validations_form.controls['lastname'].setValue(this.contact.lastname);\n    this.validations_form.controls['email'].setValue(this.contact.email);\n  } //ngOnInit\n  \n  _initContact(contact) {\n      if (_.isNull(contact)) {\n          contact = {\n              initials: '',\n              lastname: '',\n              email: '',\n              terms: ''\n          };\n      }\n      return contact;\n  }\n \n  validation_messages = {\n    'initials': [\n      { type: 'required', message: 'Initials is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please wnter a valid email.' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ],\n  };\n\n  onSubmit(data){\n    delete data.terms;\n    this.activityService.chosen_contact = data;\n    this.router.navigate(['/tab-nav/activity-booking']);\n  }\n}"],"sourceRoot":""}